[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":""},{"title":"HPE Ezmeral の商品体系","type":0,"sectionRef":"#","url":"k8s/Ezmeral/sec_Overview/Portfolio_220914_oo01/Portfolio_220914_oo01","content":"","keywords":""},{"title":"HPE GreenLake","type":1,"pageTitle":"HPE Ezmeral の商品体系","url":"k8s/Ezmeral/sec_Overview/Portfolio_220914_oo01/Portfolio_220914_oo01#hpe-greenlake","content":"HPE GreenLake for containersHPE GreenLake for ML Ops "},{"title":"HPE Ezmeral Runtime Enterprise","type":1,"pageTitle":"HPE Ezmeral の商品体系","url":"k8s/Ezmeral/sec_Overview/Portfolio_220914_oo01/Portfolio_220914_oo01#hpe-ezmeral-runtime-enterprise","content":"MapR を使わないと動かない商品 ハイブリッドクラウドにしたければこちらにしなければならない、という売り方らしい。 HPE Ezmeral Runtime Enterprise HPE Ezmeral Runtime Enterprise essentials <= mapR がなくても動く商品HPE Ezmeral Runtime Enterprise HPE Ezmeral ML OpsHPE Ezmeral Data fabricHPE Ezmeral Unified Analytics "},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. <button onClick={() => alert('button clicked!')}>Click me!</button> Copy Click me!","keywords":""},{"title":"Replication controller and replica set","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/Replication_230407_oo01/Replication_230407_oo01","content":"Replication controller and replica set","keywords":""},{"title":"Service","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/Service_230407_oo01/Service_230407_oo01","content":"Service","keywords":""},{"title":"Pods","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/Pod_230407_oo01/Pod_230407_oo01","content":"","keywords":""},{"title":"Pods","type":1,"pageTitle":"Pods","url":"k8s/MasteringKubernetes3rd/Chap1/Pod_230407_oo01/Pod_230407_oo01#pods","content":"A pod is the unit of work in Kubernetes. Each pod contains one or more containers. All the containers in a pod have the same IP address and port space.In addition, all the containers in a pod can have access to shared local storage on the node hosting the pod. Containers don't get access to local storage or any other storage by default. Volumes of storage must be mounted into each container inside the pod explicitly.  "},{"title":"Docker container","type":1,"pageTitle":"Pods","url":"k8s/MasteringKubernetes3rd/Chap1/Pod_230407_oo01/Pod_230407_oo01#docker-container","content":"It is possible to run multiple applications inside a single Docker container by having something like supervisord as the main Docker process that runs multiple processes, but this practice is often frowned upon for the following reasons: transparency Infrastructure 側から見て、(単一機能単一コンテナにすれば)どういう機能の container であるかわかり安くなる => 管理しやすくなる。 decoupling software dependenciesease of useefficiency "},{"title":"Creating k8s Clusters Overview","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap2/Creating_230407_oo01/Creating_230407_oo01","content":"","keywords":""},{"title":"本章の内容","type":1,"pageTitle":"Creating k8s Clusters Overview","url":"k8s/MasteringKubernetes3rd/Chap2/Creating_230407_oo01/Creating_230407_oo01#本章の内容","content":""},{"title":"第 3 版での記述","type":1,"pageTitle":"Creating k8s Clusters Overview","url":"k8s/MasteringKubernetes3rd/Chap2/Creating_230407_oo01/Creating_230407_oo01#第-3-版での記述","content":"The topics we will cover are as follows: Creating a single-node cluster with MinikubeCreating a multi-node cluster with KinDCreating a multi-node cluster using k3dCreating clusters in the cloudCreating bare-metal clusters from scratchReviewing other options for creating Kubernetes clusters "},{"title":"第 4 版での記述","type":1,"pageTitle":"Creating k8s Clusters Overview","url":"k8s/MasteringKubernetes3rd/Chap2/Creating_230407_oo01/Creating_230407_oo01#第-4-版での記述","content":"The topics we will cover are as follows: Getting ready for your first clusterCreating a single-node cluster with MinikubeCreating a multi-node cluster with KindCreating a multi-node cluster using k3dCreating clusters in the cloudCreating bare-metal clusters from scratchReviewing other options for creating Kubernetes clusters "},{"title":"Kubernetes 関連情報","type":0,"sectionRef":"#","url":"k8s/Overview/k8sInfo_230112_oo01/k8sInfo_230112_oo01","content":"","keywords":""},{"title":"商用ディストリビューション","type":1,"pageTitle":"Kubernetes 関連情報","url":"k8s/Overview/k8sInfo_230112_oo01/k8sInfo_230112_oo01#商用ディストリビューション","content":"商用ディストリビューションのリスト https://learn.microsoft.com/ja-jp/azure/azure-arc/kubernetes/validation-program "},{"title":"Labels","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/Labels_230407_oo01/Labels_230407_oo01","content":"","keywords":""},{"title":"Labels","type":1,"pageTitle":"Labels","url":"k8s/MasteringKubernetes3rd/Chap1/Labels_230407_oo01/Labels_230407_oo01#labels","content":"Pod のグループなどを定義するために用いられる名前のこと。 Labels are key-value pairs that are used to group together sets of objects – very often pods. This is important for several other concepts, such as replication controllers, replica sets, deployments, and services that operate on dynamic groups of objects and need to identify the members of the group. Each object may have multiple labels, and each label may be applied to different objects. "},{"title":"Label selectors","type":1,"pageTitle":"Labels","url":"k8s/MasteringKubernetes3rd/Chap1/Labels_230407_oo01/Labels_230407_oo01#label-selectors","content":"Label は Pod の全集合から特定の Pod からなる集合を選び出すために用いられる。 選び出す操作は label selector を用いて行う。 label selector には equality based と set based の２種類がある。（他にもあるのかもしれない） "},{"title":"equality based selector","type":1,"pageTitle":"Labels","url":"k8s/MasteringKubernetes3rd/Chap1/Labels_230407_oo01/Labels_230407_oo01#equality-based-selector","content":"例は以下の通り。 role = webserver, application != foo Copy "},{"title":"set-based selector","type":1,"pageTitle":"Labels","url":"k8s/MasteringKubernetes3rd/Chap1/Labels_230407_oo01/Labels_230407_oo01#set-based-selector","content":"例は以下の通り。 role in (webserver, backend) Copy "},{"title":"Annotations","type":1,"pageTitle":"Labels","url":"k8s/MasteringKubernetes3rd/Chap1/Labels_230407_oo01/Labels_230407_oo01#annotations","content":"ユーザーは、識別用途でない任意のメタデータをオブジェクトに割り当てるためにアノテーションを使用できます。ツールやライブラリなどのクライアントは、このメタデータを取得できます。 (Kubernetes 公式ドキュメント https://kubernetes.io/ja/docs/concepts/overview/working-with-objects/annotations/ より) 公式ドキュメントにある例は以下の通り。annotation = 付随情報 apiVersion: v1kind: Podmetadata: name: annotations-demo annotations: imageregistry: \"https://hub.docker.com/\"spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 Copy "},{"title":"Volume","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/Volume_230407_oo01/Volume_230407_oo01","content":"Volume Local storage used by the pod is ephemeral and goes away with the pod in most cases. Pod は \"local storage\" を container に提供する機能があるが、\"local storage\"は Pod がなくなるとなくなってしまう。 The essence of a volume is a directory with some data that is mounted into a container. Volume は container がマウントできる永続的なストレージ領域のこと。（マウントするのは pod ではなく container.) Volume にはいろいろなタイプがあるが、Container Storage Interface (CSI)という方法がおすすめ。他の方法は fade-out。","keywords":""},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"blog/long-blog-post","content":"This is the summary of a very long blog post, Use a <!-- truncate --> comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Kubernetes を使ってやりたいこと","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Motivation_230407_oo01/Motivation_230407_oo01","content":"","keywords":""},{"title":"1. Web アプリケーション、データベースの公開","type":1,"pageTitle":"Kubernetes を使ってやりたいこと","url":"k8s/MasteringKubernetes3rd/Motivation_230407_oo01/Motivation_230407_oo01#1-web-アプリケーションデータベースの公開","content":"DDBJ が公開している多数の Web アプリケーション、データベースを公開したい。 （開発効率向上のため仮想基盤を使いたい。） 計算ノードが壊れたときに自動的に別のノード上でサービスを継続できるようにしたい。autoscale までは今の所考えていない。 "},{"title":"開発と計算基盤管理の分離","type":1,"pageTitle":"Kubernetes を使ってやりたいこと","url":"k8s/MasteringKubernetes3rd/Motivation_230407_oo01/Motivation_230407_oo01#開発と計算基盤管理の分離","content":"古の UNIX 管理手法では、ミドルウェアのインストールにルート権限が必要であることから、 ミドルウェアの管理までが計算基盤側の仕事であったが、今日ではこのモデルは破綻している。 仮想基盤技術の登場により、開発者側で仮想ネットワークからアプリケーションまでを管理できるようになった。 今日の開発プロセスではこうなっていないと効率が悪い。  （小言） クラスタ計算機を構成するノードが時々壊れるのは当たり前。 壊れてもサービスが止まらないようにするのはソフトウェア側の責任k8s が無くても他にも色んな方法がある。k8s がいつも最適なわけでもない。 ついでにいうと、スパコンはそのへんのソフトを置いておくと自動的によしなに速くしてくれる機械ではない。 上手に使えば速くなるもの。 "},{"title":"2. ビッグデータ系のミドルウェアの利用（バッチ処理）","type":1,"pageTitle":"Kubernetes を使ってやりたいこと","url":"k8s/MasteringKubernetes3rd/Motivation_230407_oo01/Motivation_230407_oo01#2-ビッグデータ系のミドルウェアの利用バッチ処理","content":"Spark などでデータ処理をしたくなったときに、簡単に使えるようにしたい。 これについては、必ずしも k8s を使わないといけないわけではない。すべての管理を k8s にしたいわけではない。 VxLAN などの仮想ネットワークを使うと、それなりに性能の劣化があるので本来は避けるべきかもしれない。 k8s を使えば物理計算機の節約になることが期待される。 nVIDIA の AI 解析基盤を、簡単に使えるようにしたい。  "},{"title":"3. スパコンの稼働統計の取得","type":1,"pageTitle":"Kubernetes を使ってやりたいこと","url":"k8s/MasteringKubernetes3rd/Motivation_230407_oo01/Motivation_230407_oo01#3-スパコンの稼働統計の取得","content":"スパコン全体のログ解析（ログの保管を含めて）を k8s の上で行いたい。 ログの保管を管理ネットワーク上で行っているが、安全な区画を物理計算基盤で構築しようとすると (1)まず、いちいちハードウェアを購入しなければならずお金と時間がかかる。 (2)本当に設定が安全であるかどうか判然としない。むしろ k8s 仮想基盤上にセキュリティー上重要なものを置いてしまったほうが安全なのではないか？ => Sysdig の導入（検証） (小言) 遺伝研スパコン上の問題を実データで表現し理解していないのであれば、明日から外の人が遺伝研スパコンを運用してもなんの問題もないことになる。知っていることが全く一緒だから。遺伝研スパコンは逼迫している => 稼働統計は予算要求のために最重要。稼働統計は売上に直結している。 ユーザ対応がもう一つの鍵。 "},{"title":"What is Kubernetes?","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/WhatIs_230407_oo01/WhatIs_230407_oo01","content":"","keywords":""},{"title":"What Kubernetes is","type":1,"pageTitle":"What is Kubernetes?","url":"k8s/MasteringKubernetes3rd/Chap1/WhatIs_230407_oo01/WhatIs_230407_oo01#what-kubernetes-is","content":"Kubernetes is a platform that encompasses a huge number of services and capabilities that keeps growing. The core functionality is scheduling workloads in containers across your infrastructure, but it doesn't stop there. Here are some of the other capabilities Kubernetes brings to the table: Mounting storage systemsDistributing secretsChecking application health and readinessReplicating application instancesUsing the Horizontal Pod AutoscalerUsing Cluster AutoscalingNaming and service discoveryBalancing loadsRolling updatesMonitoring resourcesAccessing and ingesting logsDebugging applicationsProviding authentication and authorization "},{"title":"Cattle versus pets","type":1,"pageTitle":"What is Kubernetes?","url":"k8s/MasteringKubernetes3rd/Chap1/WhatIs_230407_oo01/WhatIs_230407_oo01#cattle-versus-pets","content":"In the olden days ... Developers and users knew exactly what software was running on each machine. （物理）サーバにギリシャ神話の登場人物の名前をつけたりしていた。サーバをペットのように扱った。When a server died it was a major crisis. Obviously, that approach doesn't scale. When you have tens or hundreds of servers, you must start treating them like cattle. Kubernetes takes the cattle approach to the extreme and takes full responsibility for allocating containers to specific machines. "},{"title":"Clusters","type":0,"sectionRef":"#","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01","content":"","keywords":""},{"title":"全体図","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#全体図","content":" 図を見ると、Node は Interntet => Firewall => Node 内の Proxy と通信できると書いてある。Master の方は kubectl コマンドが通信できると書いてある。 第 4 版では以下の図に変わっている。  この図は Kubernetes の公式ドキュメントの図と同じ。 https://kubernetes.io/docs/concepts/overview/components/  上記の図はいずれにしろ見にくい。（字が小さい。要素が多すぎ。） Kubernetes in Action (2018)の図のほうが見やすい。  この図は Kubernetes のコンポーネントとその配置を表している。 クラスターは Master node と Worker node からなる。Master node では control plane に属するコンポーネントが動いている。 etcd : 管理用データベースAPI server controller manager, scheduler Worker node では以下のコンポーネントが動いている。 container runtime (Docker, rkt, ...)kubelet : which talks to the API server and manages containers on its nodekube-proxy "},{"title":"用語の定義 : クラスター","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#用語の定義--クラスター","content":"Clusters A cluster is a collection of hosts (nodes). つまり host = node と言っている。 Nodes A node is a single host. It may be a physical or virtual machine. つまり node = 物理計算機（または VM) = host と言っている。 Each Kubernetes node runs several Kubernetes components, such as the kubelet, the container runtime, and kube-proxy. （大抵の）node の上では kubelet, container runtime, kube-proxy が動いていて、 （次の control plane の説明を読むと）とある node の上では control plane に属するソフトウェアが動いている、と解される。 Control plane Usually, all the control plane components are set up on the same host although its not required. こう書いてあるということは、Control plane は(node と対比されるようなものではなく)ソフトウェアである、と言っている。 The control plane of Kubernetes consists of several components: an API server, a scheduler, a controller manager and optionally a cloud controller manager.  第 3 版では The master is the control plane of Kubernetes.となっているが第 4 版では master という言葉が削除されている。 master と言ってしまうと master node つまり node の一種と解されてしまいがちだからだろう。そう取ってしまうと上記定義の辻褄が合わなくなってくる。 "},{"title":"クラスターの実例 : kind","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#クラスターの実例--kind","content":"kind は上記の物理計算機の意味の node の代わりに、Docker コンテナを node と見立てて Kubernetes を簡易的にデプロイする仕組み。 kind におけるノードとは？kind におけるマルチノード構成とは？ kind は、一台の物理計算機の中でしか動作しない。複数台の物理計算機をつなぎ合わせて物理クラスタ構成とすることはできない。kind の用語でノードとは物理計算機に見立てた Docker コンテナのこと。kind の用語でマルチノード構成とは、１台の物理計算機の中に複数の Docker コンテナ(=kind の意味のノード）を立てて、Docker コンテナのクラスタを構成することを意味している。 "},{"title":"kind のインストール","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#kind-のインストール","content":"Kubuntu Linux 22.04LTS に kind をインストールしてみた。 参考資料 https://kind.sigs.k8s.io/docs/user/quick-start/ "},{"title":"kubectl のインストール","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#kubectl-のインストール","content":"参考資料（kind の公式マニュアルのインストール手順）の冒頭に、kubectl をインストールせよと書いてあったので、 指示に従ってインストールした。 下記を参考にして kubectl をインストールせよとのこと。 https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/ 手順の簡便さのため パッケージマネージャを用いてインストールを行った。 Update the apt package index and install packages needed to use the Kubernetes apt repository: sudo apt-get updatesudo apt-get install -y ca-certificates curl Copy Download the Google Cloud public signing key: sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg Copy Add the Kubernetes apt repository: echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list Copy Update apt package index with the new repository and install kubectl: sudo apt-get updatesudo apt-get install -y kubectl Copy 問題なくインストールされた。 最後のsudo apt-get install -y kubectlの結果は以下の通りであった。 oogasawa@MiniPC:~/tmp (2023-04-14 03:03:07)$ sudo apt-get install -y kubectlパッケージリストを読み込んでいます... 完了依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 以下のパッケージが自動でインストールされましたが、もう必要とされていません: libflashrom1 libftdi1-2 libllvm13これを削除するには 'sudo apt autoremove' を利用してください。以下のパッケージが新たにインストールされます: kubectlアップグレード: 0 個、新規インストール: 1 個、削除: 0 個、保留: 44 個。10.2 MB のアーカイブを取得する必要があります。この操作後に追加で 49.3 MB のディスク容量が消費されます。取得:1 https://packages.cloud.google.com/apt kubernetes-xenial/main amd64 kubectl amd64 1.27.0-00 [10.2 MB]10.2 MB を 2 秒 で取得しました (4,339 kB/s)以前に未選択のパッケージ kubectl を選択しています。(データベースを読み込んでいます ... 現在 249642 個のファイルとディレクトリがインストールされています。).../kubectl_1.27.0-00_amd64.deb を展開する準備をしています ...kubectl (1.27.0-00) を展開しています...kubectl (1.27.0-00) を設定しています ...oogasawa@MiniPC:~/tmp (2023-04-14 03:03:28)$ Copy "},{"title":"kind のインストール","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#kind-のインストール-1","content":"公式ドキュメントの\"Quick Start\" => \"Install From Release Binaries\"に従ってインストールした。 https://kind.sigs.k8s.io/docs/user/quick-start/ 手順は単に以下のとおりである。 On Linux: cd $HOME/tmpcurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-linux-amd64chmod +x ./kindsudo mv ./kind /usr/local/bin/kind Copy 問題なくインストールされた。実行結果は以下のとおりであった。 ogasawa@MiniPC:~/tmp (2023-04-14 03:08:37)$ curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-linux-amd64 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 97 100 97 0 0 208 0 --:--:-- --:--:-- --:--:-- 208 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0100 6808k 100 6808k 0 0 3032k 0 0:00:02 0:00:02 --:--:-- 7684koogasawa@MiniPC:~/tmp (2023-04-14 03:08:47)$ chmod +x ./kindoogasawa@MiniPC:~/tmp (2023-04-14 03:08:56)$ sudo mv ./kind /usr/local/bin/kindoogasawa@MiniPC:~/tmp (2023-04-14 03:09:06)$ Copy "},{"title":"Creating a Cluster","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#creating-a-cluster","content":"kind create clusterを実行するだけでクラスターが作られるとのことなのでやってみた。 Docker を一般ユーザで実行できるように設定していなかったので、sudoが必要だった。 oogasawa@MiniPC:~/tmp (2023-04-14 03:09:06)$ kind create clusterERROR: failed to create cluster: failed to list nodes: command \"docker ps -a --filter label=io.x-k8s.kind.cluster=kind --format '{{.Names}}'\" failed with error: exit status 1Command Output: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22label%22%3A%7B%22io.x-k8s.kind.cluster%3Dkind%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission deniedoogasawa@MiniPC:~/tmp (2023-04-14 03:14:21)$ sudo kind create clusterCreating cluster \"kind\" ... ✓ Ensuring node image (kindest/node:v1.26.3) 🖼 ✓ Preparing nodes 📦 ✓ Writing configuration 📜 ✓ Starting control-plane 🕹️ ✓ Installing CNI 🔌 ✓ Installing StorageClass 💾 Set kubectl context to \"kind-kind\"You can now use your cluster with: kubectl cluster-info --context kind-kind Not sure what to do next? 😅 Check out https://kind.sigs.k8s.io/docs/user/quick-start/ Copy この状態だと、同様に、kubectlをつかうときにもsudoが必要であった。 oogasawa@MiniPC:~/tmp (2023-04-14 03:16:12)$ kubectl cluster-info --context kind-kinderror: context \"kind-kind\" does not exist oogasawa@MiniPC:~/tmp (2023-04-14 03:20:37)$ sudo kubectl cluster-info --context kind-kindKubernetes control plane is running at https://127.0.0.1:44393CoreDNS is running at https://127.0.0.1:44393/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.oogasawa@MiniPC:~/tmp (2023-04-14 03:20:59)$ Copy この例のように単にkind create clusterコマンドを実行すると、kind-control-plane という node 1 つからなるクラスタが生成された。 oogasawa@MiniPC:~/tmp (2023-04-14 03:42:42)$ sudo kubectl get nodesNAME STATUS ROLES AGE VERSIONkind-control-plane Ready control-plane 26m v1.26.3oogasawa@MiniPC:~/tmp (2023-04-14 03:42:49)$ Copy "},{"title":"Deleting a Cluster","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#deleting-a-cluster","content":"この例のように単にkind create clusterコマンドでクラスタを作った場合は、 単にkind delete clusterを実行することでクラスタが削除できた。 oogasawa@MiniPC:~/tmp (2023-04-14 03:42:49)$ sudo kind delete clusterDeleting cluster \"kind\" ...Deleted nodes: [\"kind-control-plane\"]oogasawa@MiniPC:~/tmp (2023-04-14 03:48:14)$ sudo kubectl cluster-info E0414 03:48:26.486964 157208 memcache.go:265] couldn't get current server API group list: Get \"http://localhost:8080/api?timeout=32s\": dial tcp 127.0.0.1:8080: connect: connection refusedE0414 03:48:26.487394 157208 memcache.go:265] couldn't get current server API group list: Get \"http://localhost:8080/api?timeout=32s\": dial tcp 127.0.0.1:8080: connect: connection refusedE0414 03:48:26.489075 157208 memcache.go:265] couldn't get current server API group list: Get \"http://localhost:8080/api?timeout=32s\": dial tcp 127.0.0.1:8080: connect: connection refusedE0414 03:48:26.490790 157208 memcache.go:265] couldn't get current server API group list: Get \"http://localhost:8080/api?timeout=32s\": dial tcp 127.0.0.1:8080: connect: connection refusedE0414 03:48:26.491691 157208 memcache.go:265] couldn't get current server API group list: Get \"http://localhost:8080/api?timeout=32s\": dial tcp 127.0.0.1:8080: connect: connection refused To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.The connection to the server localhost:8080 was refused - did you specify the right host or port?oogasawa@MiniPC:~/tmp (2023-04-14 03:48:26)$ Copy "},{"title":"スワップについて","type":1,"pageTitle":"Clusters","url":"k8s/MasteringKubernetes3rd/Chap1/Concepts_230407_oo01/Concepts_230407_oo01#スワップについて","content":"公式ドキュメントのインストール方法である kubeadm を使って Kubernetes をインストールするときにはスワップがオフになっているかインストール時にチェックされる。 https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ しかし kind のインストール作業では、以下のようにスワップ自体は存在していたにもかかわらず何も言われなかった。 oogasawa@MiniPC:~/public_html/works/fasta_store (2023-04-14 09:54:37)$ swapon -sFilename Type Size Used Priority/swapfile file 2097148 0 -2 Copy 以下は ChatGPT の出力 Kubernetes in Docker (kind)は、ローカル環境で Kubernetes を実行するためのツールであり、スワップがオンになっていても機能しますが、推奨されていません。スワップは、パフォーマンスに悪影響を与える可能性があります。 スワップが有効になっている場合、メモリが不足した場合に、一部のデータがディスクにスワップアウトされます。これにより、パフォーマンスが低下し、アプリケーションのレイテンシーやスループットが低下する可能性があります。 Kubernetes では、ノードのメモリを管理する kubelet がスワップをオフにすることが推奨されています。したがって、kind を使用する場合でも、スワップをオフにすることを推奨します。スワップをオフにするには、次のように設定ファイルを変更することができます。 $ sudo swapoff -a Copy ただし、スワップをオフにする前に、十分なメモリを持つかどうかを確認することが重要です。十分なメモリがない場合、アプリケーションがクラッシュする可能性があります。 "}]